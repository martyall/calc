use std::str::FromStr;
use crate::ast::{Opcode, Expr};

grammar;

ExprOp: Opcode = {
    "+" => Opcode::Add,
    "-" => Opcode::Sub
}

pub Expr: Box<Expr> = {
    Expr ExprOp Factor => Box::new(Expr::BinOp(<>)),
    Factor,
};

FactorOp: Opcode = {
    "*" => Opcode::Mul,
    "/" => Opcode::Div,
};

Factor: Box<Expr> = {
    Factor FactorOp Pow => Box::new(Expr::BinOp(<>)),
    Pow,
};

PowOp: Opcode = {
    "^" => Opcode::Pow,
};

Pow: Box<Expr> = {
    Pow PowOp Term => Box::new(Expr::BinOp(<>)),
    Term,
};


Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)), // (4)
    "(" <Expr> ")"
};

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap()
};